def test1():
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(0)
  set_tcp(p[0.0,5.0E-5,0.0,0.0,0.0,1.5707])
  set_payload(2.0,[0.0,0.0,0.066])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_input_actions_to_default()
  global baka_var_1=99
  global baka=100
  global Point_2=p[0.42863684998875035,0.16154578192473013,0.1948708422180998,-0.010155679889295433,-0.06243252052117069,-0.6470504017628608]
  global Point_3=p[0.5015402213335621,0.32960127086620333,0.1940075245424864,-0.010257256493414257,-0.0625347910326143,-0.6470494154377765]
  global Point_4=p[0.2995415401456767,0.3927410594974189,0.1811522531537563,-0.0100205153235133,-0.06249702560420078,-0.6469728120968965]
  global Provi=p[0.42863684998875035,0.16154578192473013,0.1948708422180998,-0.017233739845174737,-0.059686177566420334,-0.40902966473849134]
  # begin: URCap Installation Node
  #   Source: Robotiq_Force_Torque_Sensor, 1.1.1, Robotiq Inc.
  #   Type: FT Sensor
  ###############################################################
  # Script file used to communicate with Robotiq's ft sensor
  # Version: 0.0.1
  ###############################################################
  
  def rq_move_relative(P_from, P_to, Pi):
    return pose_trans(P_to, pose_trans(pose_inv(P_from), Pi))
  end
  
  def rq_elementWiseSub(list1, list2):
    global rq_return_list=list1
    i=0
    while i<length(list1):
      rq_return_list[i]=list1[i] - list2[i]
      i=i+1
    end
    return rq_return_list
  end
  
  if (not socket_open("127.0.0.1",63351,"stream")):
   popup("Can't connect to the sensor driver", "Robotiq's FT Sensor", error=True)
  end
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_2-Finger_Adaptive_Gripper, 1.0.2, Robotiq Inc.
  #   Type: Gripper
  
  ###########################################
  #######Gripper urcap preamble start########
  #######Version 1.1.1########
  
  #aliases for the gripper variable names
  ACT = 1
  GTO = 2
  ATR = 3
  ARD = 4
  FOR = 5
  SPE = 6
  OBJ = 7
  STA = 8
  FLT = 9
  POS = 10
  PRE = 11
  
  def rq_init_connection(gripper_sid=9, gripper_socket="gripper_socket"):
  	socket_open("127.0.0.1",63352, gripper_socket)
  	socket_set_var("SID", gripper_sid,  gripper_socket)
  	ack = socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_activate(gripper_socket="gripper_socket"):
  	rq_gripper_act = 0
  	rq_set_var(ACT,1, gripper_socket)
  end
  
  def rq_activate_and_wait(gripper_socket="gripper_socket"):
  	rq_activate(gripper_socket)
  
  	while(not rq_is_gripper_activated(gripper_socket)):
  		# wait for activation completed
  	end
  end
  
  def rq_stop(gripper_socket="gripper_socket"):
  	rq_set_var(GTO,0, gripper_socket)
  end
  
  def rq_reset(gripper_socket="gripper_socket"):
  	rq_gripper_act = 0
  	rq_obj_detect = 0
  	rq_mov_complete = 0
  
  	rq_set_var(ACT,0, gripper_socket)
  	rq_set_var(ATR,0, gripper_socket)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="gripper_socket"):
  
  	rq_set_var(ARD,0, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="gripper_socket"):
  	rq_set_var(ARD,1, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  
  def rq_set_force(force, gripper_socket="gripper_socket"):
  	rq_set_var(FOR,force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="gripper_socket"):
  	rq_set_var(SPE,speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="gripper_socket"):
  	rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="gripper_socket"):
  	rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="gripper_socket"):
  	rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="gripper_socket"):
  	rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="gripper_socket"):
  	rq_mov_complete = 0
  	rq_obj_detect = 0
  
  	rq_set_pos(pos, gripper_socket)
  	rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="gripper_socket"):
  	rq_move(pos, gripper_socket)
  
  	while (not rq_is_motion_complete(gripper_socket)):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  
  	# following code used for compatibility with previous versions
  	rq_is_object_detected(gripper_socket)
  
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  
  def rq_go_to(gripper_socket="gripper_socket"):
  	rq_set_var(GTO,1, gripper_socket)
  end
  
  # reset the rGTO to prevent movement and
  # set the position
  def rq_set_pos(pos, gripper_socket="gripper_socket"):
  	rq_set_var(GTO,0, gripper_socket)
  
  	rq_set_var(POS, pos, gripper_socket)
  
  	gPRE = rq_get_var(PRE, 3, gripper_socket)
  	pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  	sync()
  	while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
  		gPRE = rq_get_var(PRE, 3, gripper_socket)
  		pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  		sync()
  	end
  end
  
  def rq_is_motion_complete(gripper_socket="gripper_socket"):
  	rq_mov_complete = 0
  
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  	sleep(0.01)
  
  	if (is_OBJ_gripper_at_position(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	if (is_OBJ_object_detected(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	return False
  
  end
  
  def rq_is_gripper_activated(gripper_socket="gripper_socket"):
  	gSTA = rq_get_var(STA, 1, gripper_socket)
  
  	if(is_STA_gripper_activated(gSTA)):
  		rq_gripper_act = 1
  		return True
  	else:
  		rq_gripper_act = 0
  		return False
  	end
  end
  
  def rq_is_object_detected(gripper_socket="gripper_socket"):
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  
  	if(is_OBJ_object_detected(gOBJ)):
  		rq_obj_detect = 1
  		return True
  	else:
  		rq_obj_detect = 0
  		return False
  	end
  end
  
  def rq_current_pos(gripper_socket="gripper_socket"):
  	rq_pos = socket_get_var("POS",gripper_socket)
  	sync()
      return rq_pos
  end
  
  def rq_print_gripper_fault_code(gripper_socket="gripper_socket"):
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  
  	if(is_FLT_no_fault(gFLT)):
  		textmsg("Gripper Fault : ", "No Fault (0x00)")
  	elif (is_FLT_action_delayed(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to action (0x05)")
  	elif (is_FLT_not_activated(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: The activation must be set prior to action (0x07)")
  	elif (is_FLT_autorelease_in_progress(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
  	elif (is_FLT_overcurrent(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Overcurrent protection tiggered (0x0E)")
  	elif (is_FLT_autorelease_completed(gFLT)):
  		textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
  	else:
  		textmsg("Gripper Fault : ", "Unkwown Fault")
  	end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="gripper_socket"):
  	socket_send_string("GET NCY",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
  	else:
  		textmsg("Gripper Cycle Number : ", string_from_server)
  	end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="gripper_socket"):
  	socket_send_string("GET DST",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
  	elif(string_from_server == "1"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
  	elif(string_from_server == "2"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
  	elif(string_from_server == "3"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
  	else:
  		textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
  	end
  end
  
  def rq_print_gripper_serial_number():
  	#socket_send_string("GET SNU",gripper_socket)
  	#sync()
  	#string_from_server = socket_read_string(gripper_socket)
  	#sync()
  	#textmsg("Gripper Serial Number : ", string_from_server)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="gripper_socket"):
  	socket_send_string("GET FWV",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	textmsg("Gripper Firmware Version : ", string_from_server)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="gripper_socket"):
  	socket_send_string("GET VER",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	textmsg("Gripper Driver Version : ", string_from_server)
  end
  
  def rq_print_gripper_probleme_connection(gripper_socket="gripper_socket"):
  	socket_send_string("GET PCO",gripper_socket)
  	sync()
  	string_from_server = socket_read_string(gripper_socket)
  	sync()
  	if (string_from_server == "0"):
  		textmsg("Gripper Connection State : ", "No connection problem detected")
  	else:
  		textmsg("Gripper Connection State : ", "Connection problem detected")
  	end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
  	# list length is not 3
  	if (list_of_bytes[0] != 3):
  		return False
  	end
  
  	# first byte not is 'a'?
  	if (list_of_bytes[1] != 97):
  		return False
  	end
  
  	# first byte not is 'c'?
  	if (list_of_bytes[2] != 99):
  		return False
  	end
  
  	# first byte not is 'k'?
  	if (list_of_bytes[3] != 107):
  		return False
  	end
  
  	return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
  	if (is_ack(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_STA_gripper_activated (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  
  	return False
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  # Used to test OBJ = 0x1 or OBJ = 0x2
  def is_OBJ_object_detected (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '2'?
  	if (list_of_bytes[1] == 50):
  		return True
  	end
  
  	# byte is '1'?
  	if (list_of_bytes[1]  == 49):
  		return True
  	end
  
  	return False
  
  end
  
  # Returns True if list_of_byte is [1, '3']
  # Used to test OBJ = 0x3
  def is_OBJ_gripper_at_position (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  
  	return False
  end
  
  def is_not_OBJ_gripper_at_position (list_of_bytes):
  
  	if (is_OBJ_gripper_at_position(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_FLT_no_fault(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '0'?
  	if (list_of_bytes[2] != 48):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_action_delayed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_not_activated(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '7'?
  	if (list_of_bytes[2] != 55):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_autorelease_in_progress(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '1'?
  	if (list_of_bytes[2] != 49):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_overcurrent(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '4'?
  	if (list_of_bytes[2] != 52):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_autorelease_completed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="gripper_socket"):
  
  	sync()
  	if (var_name == ACT):
  		socket_set_var("ACT", var_value, gripper_socket)
  	elif (var_name == GTO):
  		socket_set_var("GTO", var_value, gripper_socket)
  	elif (var_name == ATR):
  		socket_set_var("ATR", var_value, gripper_socket)
  	elif (var_name == ARD):
  		socket_set_var("ARD", var_value, gripper_socket)
  	elif (var_name == FOR):
  		socket_set_var("FOR", var_value, gripper_socket)
  	elif (var_name == SPE):
  		socket_set_var("SPE", var_value, gripper_socket)
  	elif (var_name == POS):
  		socket_set_var("POS", var_value, gripper_socket)
  	else:
  	end
  
  	sync()
  	ack = socket_read_byte_list(3, gripper_socket)
  	sync()
  
  	while(is_not_ack(ack)):
  
  		textmsg("rq_set_var : retry", " ...")
  		textmsg("rq_set_var : var_name = ", var_name)
  		textmsg("rq_set_var : var_value = ", var_value)
  
  		if (ack[0] != 0):
  			textmsg("rq_set_var : invalid ack value = ", ack)
  		end
  
  		socket_set_var(var_name , var_value,gripper_socket)
  		sync()
  		ack = socket_read_byte_list(3, gripper_socket)
  		sync()
  	end
  end
  
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="gripper_socket"):
  
  	if (var_name == FLT):
  		socket_send_string("GET FLT",gripper_socket)
  		sync()
  	elif (var_name == OBJ):
  		socket_send_string("GET OBJ",gripper_socket)
  		sync()
  	elif (var_name == STA):
  		socket_send_string("GET STA",gripper_socket)
  		sync()
  	elif (var_name == PRE):
  		socket_send_string("GET PRE",gripper_socket)
  		sync()
  	else:
  	end
  
  	var_value = socket_read_byte_list(nbr_bytes, gripper_socket)
  	sync()
  
  	return var_value
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="gripper_socket"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="gripper_socket"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="gripper_socket"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="gripper_socket"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="gripper_socket"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  
  def rq_current_pos_norm(gripper_socket="gripper_socket"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  #########################################
  rq_obj_detect = 0
  socket_open("127.0.0.1",63352,"gripper_socket")
  
  #######Vision urcap preamble end##########
  ###########################################
  
  # end: URCap Installation Node
  while (True):
    $ 1 "ロボットプログラム"
    $ 2 "スクリプト: X0.script"
    address="172.16.58.34"
    port=3000
    sname="mt"
    socket_open(address,port,sname)
    p=get_actual_tcp_pose()
    socket_send_line("X0()",sname)
    ret=socket_read_line(sname)
    socket_close(sname)
    $ 3 "MoveJ"
    $ 4 "CapturePoint_1"
    movej([0.019236553460359573, -1.5764253775226038, -2.2134955565081995, -0.9818223158465784, 1.5563857555389404, 0.010527018457651138], a=1.3962634015954636, v=1.0471975511965976)
    $ 5 "待機: 1.0"
    sleep(1.0)
    $ 6 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 7 "MoveJ"
    $ 8 "CapturePoint_2"
    movej([-0.11514169374574834, -1.645588223134176, -2.124152485524313, -1.0021336714373987, 1.7205175161361694, -0.004040543233053029], a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "待機: 1.0"
    sleep(1.0)
    $ 10 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 11 "MoveJ"
    $ 12 "CapturePoint_3"
    movej([0.039204519242048264, -1.1965559164630335, -2.6593075434314173, -0.5299370924579065, 1.5409612655639648, 0.06550165265798569], a=1.3962634015954636, v=1.0471975511965976)
    $ 13 "待機: 1.0"
    sleep(1.0)
    $ 14 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 15 "待機: 1.0"
    sleep(1.0)
    $ 16 "MoveJ"
    $ 17 "CapturePoint_4"
    movej([0.260366290807724, -1.4237921873675745, -2.384334389363424, -0.8983548323260706, 1.302194356918335, 0.20416438579559326], a=1.3962634015954636, v=1.0471975511965976)
    $ 18 "待機: 1.0"
    sleep(1.0)
    $ 19 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 20 "MoveJ"
    $ 21 "CapturePoint_5"
    movej([0.08390193432569504, -1.4582026640521448, -2.008887592946188, -1.3212960402118128, 1.525608777999878, 0.8979817628860474], a=1.3962634015954636, v=1.0471975511965976)
    $ 22 "待機: 1.0"
    sleep(1.0)
    $ 23 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 24 "MoveJ"
    $ 25 "CapturePoint_6"
    movej([0.07304871827363968, -1.8049138228045862, -1.3965747992144983, -1.8732622305499476, 1.505558729171753, 0.8949710726737976], a=1.3962634015954636, v=1.0471975511965976)
    $ 26 "待機: 1.0"
    sleep(1.0)
    $ 27 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 28 "MoveJ"
    $ 29 "CapturePoint_7"
    movej([-0.1684482733355921, -1.754843537007467, -1.3927066961871546, -1.839409653340475, 1.79131281375885, 0.12448351830244064], a=1.3962634015954636, v=1.0471975511965976)
    $ 30 "待機: 1.0"
    sleep(1.0)
    $ 31 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 32 "MoveJ"
    $ 33 "CapturePoint_8"
    movej([0.05974810570478439, -1.0564435164081019, -2.3755930105792444, -1.0656340757953089, 1.5152899026870728, 0.14225387573242188], a=1.3962634015954636, v=1.0471975511965976)
    $ 34 "待機: 1.0"
    sleep(1.0)
    $ 35 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 36 "MoveJ"
    $ 37 "CapturePoint_9"
    movej([0.4216458797454834, -1.3563945929156702, -1.936667267476217, -1.5862415472613733, 1.2559831142425537, 0.4288008213043213], a=1.3962634015954636, v=1.0471975511965976)
    $ 38 "待機: 1.0"
    sleep(1.0)
    $ 39 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 40 "MoveJ"
    $ 41 "CapturePoint_10"
    movej([0.08044786006212234, -1.3889859358416956, -1.4444249312030237, -1.9530208746539515, 1.58424973487854, 0.2823019027709961], a=1.3962634015954636, v=1.0471975511965976)
    $ 42 "待機: 1.0"
    sleep(1.0)
    $ 43 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 44 "MoveJ"
    $ 45 "CapturePoint_11"
    movej([-0.037249390278951466, -1.855030361806051, -0.9423320929156702, -2.1922500769244593, 1.5914766788482666, 0.2892935872077942], a=1.3962634015954636, v=1.0471975511965976)
    $ 46 "待機: 1.0"
    sleep(1.0)
    $ 47 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 48 "MoveJ"
    $ 49 "CapturePoint_12"
    movej([-0.18724042574037725, -1.9278271834002894, -0.7363932768451136, -2.303547207509176, 1.7102463245391846, 0.6397265791893005], a=1.3962634015954636, v=1.0471975511965976)
    $ 50 "待機: 1.0"
    sleep(1.0)
    $ 51 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 52 "MoveJ"
    $ 53 "CapturePoint_13"
    movej([-0.18606502214540654, -0.9372966925250452, -1.981708828602926, -1.590761963521139, 1.7019891738891602, 0.5443658232688904], a=1.3962634015954636, v=1.0471975511965976)
    $ 54 "待機: 1.0"
    sleep(1.0)
    $ 55 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 56 "停止"
    halt
    $ 57 "MoveJ"
    $ 58 "CapturePoint_14"
    movej([-2.2332399527179163, -0.6763976255999964, -1.160577122365133, -2.85549766222109, 2.1700472831726074, -1.3814733664142054], a=1.3962634015954636, v=1.0471975511965976)
    $ 59 "待機: 1.0"
    sleep(1.0)
    $ 60 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 61 "MoveJ"
    $ 62 "CapturePoint_15"
    movej([0.006841119844466448, -0.47218639055360967, -1.4922898451434534, -2.056896511708395, 1.51628577709198, -0.07959252992738897], a=1.3962634015954636, v=1.0471975511965976)
    $ 63 "待機: 1.0"
    sleep(1.0)
    $ 64 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 65 "MoveJ"
    $ 66 "CapturePoint_16"
    movej([0.007008899003267288, -0.2709429899798792, -1.7066577116595667, -1.9307768980609339, 1.515830397605896, 0.04803352430462837], a=1.3962634015954636, v=1.0471975511965976)
    $ 67 "待機: 1.0"
    sleep(1.0)
    $ 68 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 69 "MoveJ"
    $ 70 "CapturePoint_17"
    movej([-0.7138965765582483, -1.8834050337420862, -0.5443022886859339, -2.8202388922320765, 1.9762024879455566, -0.7661612669574183], a=1.3962634015954636, v=1.0471975511965976)
    $ 71 "待機: 1.0"
    sleep(1.0)
    $ 72 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 73 "MoveJ"
    $ 74 "CapturePoint_18"
    movej([-0.7138965765582483, -1.88348895708193, -0.37110835710634404, -2.8202508131610315, 1.9762983322143555, 0.9399505257606506], a=1.3962634015954636, v=1.0471975511965976)
    $ 75 "待機: 1.0"
    sleep(1.0)
    $ 76 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 77 "MoveJ"
    $ 78 "CapturePoint_19"
    movej([-1.2411797682391565, -1.2279260794269007, -0.8265231291400355, -2.732741657887594, 2.171389102935791, 1.0910555124282837], a=1.3962634015954636, v=1.0471975511965976)
    $ 79 "待機: 1.0"
    sleep(1.0)
    $ 80 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 81 "MoveJ"
    $ 82 "CapturePoint_20"
    movej([-1.2411797682391565, -1.3497465292560022, -0.757369343434469, -2.7561209837542933, 2.032703161239624, -1.243354622517721], a=1.3962634015954636, v=1.0471975511965976)
    $ 83 "待機: 1.0"
    sleep(1.0)
    $ 84 "スクリプト: X1.script"
    address="172.16.58.34"
    port=3000
    timeout=10
    socket_open(address,port)
    p=get_actual_tcp_pose()
    rpy=rotvec2rpy([p[3],p[4],p[5]])
    socket_send_string("X1(")
    socket_send_string(p[0])
    socket_send_string(",")
    socket_send_string(p[1])
    socket_send_string(",")
    socket_send_string(p[2])
    socket_send_string(",")
    socket_send_string(r2d(rpy[0]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[1]))
    socket_send_string(",")
    socket_send_string(r2d(rpy[2]))
    socket_send_line(")")
    ret=socket_read_line(timeout=10)
    if (ret!="OK"):
      code=socket_read_string()
      popup(code,title="X1",blocking=True)
    end
    socket_close()
    $ 85 "MoveJ"
    $ 86 "CapturePoint_1"
    movej([0.019236553460359573, -1.5764253775226038, -2.2134955565081995, -0.9818223158465784, 1.5563857555389404, 0.010527018457651138], a=1.3962634015954636, v=1.0471975511965976)
    $ 87 "停止"
    halt
  end
end
